import { Component, OnInit } from '@angular/core';

import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { NbDateService } from '@nebular/theme';
// import { SmartTableData } from 'app/@core/data/smart-table';
import { SmartTableData } from '../../@core/data/smart-table';
// import { enumValues } from 'environments/configuration';
import { enumValues } from '../../../environments/configuration';
import { LocalDataSource } from 'ng2-smart-table';
import { OrdersService } from '../../services/orders.service';
import { first } from 'rxjs/operators';
import { AuthenticationService } from '../../services/authentication.service';

import * as moment from 'moment';
import { userRights } from '../../../environments/commonUserRights';
import { FileUplDowlService } from '../../services/file-upl-dowl.service';
import {ModalDismissReasons, NgbModal} from '@ng-bootstrap/ng-bootstrap';
// import { ToastrService } from 'ngx-toastr';
import { GeneralService } from '../../services/general.service';

@Component({
  selector: 'ngx-medicine-master',
  templateUrl: './medicine-master.component.html',
  styleUrls: ['./medicine-master.component.scss']
})
export class MedicineMasterComponent implements OnInit {

  closeResult:string;
  medicineTypes: any;
  addTypes: any;
  dateFromUser: any;
  loginForm: any;
  currentUser: any;
  medicineMaster: any;
  selectedID: any;
  isHide: boolean = false;
  mediID: any;
  checked: boolean = true;
  validate: boolean = true;
  onEvent: any = Object.values(userRights.onEvent);

  files: File[] = [];
  attachmentFileName: any;
  CustomerImportForm: FormGroup;

  medicineMasterLocal: any;
  dtOptions: DataTables.Settings = {};
  //  = Object.values(enumValues.medicineMaster);
  settings = {
    actions: {
      add: false,
      edit: false,
      delete: false
    },
    columns: {
      medicineId: {
        title: 'Medicine Id',
        type: 'number',
      },
      medicineName: {
        title: 'Medicine Name',
        type: 'string',
      },
      strength: {
        title: 'Strength',
        type: 'string',
      },
      packSize: {
        title: 'Pack Size',
        type: 'number',
      },
      price: {
        title: 'price',
        type: 'string',
      },
      type: {
        title: 'Type',
        type: 'string',
      },
      manufacturer: {
        title: 'Manufacturer Name',
        type: 'string',
      },
      isActive: {
        title: 'Status',
        type: 'string',
      },

    },
  };
  minDate: any;
  source: LocalDataSource = new LocalDataSource();

  membershipOptions: any = Object.values(enumValues.membershipOptions);
  pointsAccumulationStarts: any = Object.values(enumValues.pointsAccumulationStarts);

  constructor(
    public service: SmartTableData,
    public dateService: NbDateService<Date>,
    public FormBuilder: FormBuilder,
    public ordersService: OrdersService,
    public authenticationService: AuthenticationService,
    public fileService: FileUplDowlService,
    private modalService: NgbModal,
    // private toastr: ToastrService,
    
  ) {
    this.currentUser = this.authenticationService.currentUserValue;
    const data = this.service.getData();
    this.source.load(data);
    console.log(this.source);
  }

  ngOnInit(): void {

    this.getMediTypeDropDown();

    console.log("current user All:---->", this.currentUser);

    this.currentUser.data.userRoles.forEach(e1 => {
      console.log("Current User Value is:--->", e1);
      this.onEvent.forEach(e2 => {
        (e1.moduleDisplayName === "Update Medicine" && e1.modulePermission === "Download") ? e2.downloadButton=false :
          (e1.moduleDisplayName === "Update Medicine" && e1.modulePermission === "Upload") ? e2.uploadButton=false :
            (e1.moduleDisplayName === "Medicine Master" && e1.modulePermission === "Edit") ? e2.editButton=false :
            (e1.moduleDisplayName === "Update Medicine" && e1.modulePermission === "Edit") ? e2.updateButton=false : 0;

      });

    });

    this.getAutoGeneratedID();
    this.medicineMaster = this.FormBuilder.group({
      id: ['', Validators.compose([Validators.required])],
      mediname: ['', Validators.compose([Validators.required])],
      strength: ['', Validators.compose([Validators.required])],
      size: ['', Validators.compose([Validators.required])],
      price: ['', Validators.compose([Validators.required])],
      type: ['', Validators.compose([Validators.required])],
      manufacturer: ['', Validators.compose([Validators.required])],
      status: ['', Validators.compose([Validators.required])]

    });

    this.CustomerImportForm = this.FormBuilder.group({
      CustomerImportFile: this.files
    });
    // this.addMediType();
    this.currentDate();
    this.getAllData();
    // this.onSearchData();

  }

  get f() { return this.medicineMaster.controls; }

  // Selection Clear function
  clearSelection() {
    this.medicineMaster.reset();
  }


  getStartDate(ev) {
    console.log(ev);
    this.minDate = this.dateService.addDay(ev, 1); // minDate is selected start date, which use to set the to date 1 day after start date.
  }

  onDeleteConfirm(event): void {
    if (window.confirm('Are you sure you want to delete?')) {
      event.confirm.resolve();
    } else {
      event.confirm.reject();
    }
  }
  setCheckedStatus(checked) {
    console.log('checked', checked.target.checked);
    this.checked = checked.target.checked; // your variable
  }
  currentDate() {
    let initDate = this.dateService.today();
    // this.dateFromUser = moment(initDate).format('YYYY-MM-DD');
    this.dateFromUser = moment(initDate).format('YYYY-MM-DDTHH:mm:ss.SSSSZ');

  }


  submitMediData(medicineMaster) {

    if (medicineMaster.status === true) {
      medicineMaster.status = 1;
    } else {
      medicineMaster.status = 0;
    }
    console.log(medicineMaster);

    let data = {
      Id: 0,
      MedicineId: medicineMaster.id,
      PharmacistUserId: this.currentUser.data.userId,
      MedicineName: medicineMaster.mediname,
      Price: medicineMaster.price,
      Strength: medicineMaster.strength,
      PackSize: medicineMaster.size,
      Type: medicineMaster.type,
      Manufacturer: medicineMaster.manufacturer,
      IsActive: medicineMaster.status,
      AddedBy: this.currentUser.data.userId,
      AddedOn: this.dateFromUser,
    }
    console.log(data);
    this.ordersService.medicineMaster(data).subscribe(
      res => {
        console.log(res);
        if (!res.data) {

          let title = 'data has not been submitted.. Try Again!!!';
          console.log(title);
          return;
        } else {

          let title = 'data has been submitted Successfully!!!';
          console.log(title);

        }

        // this.medicineMasterLocal.push(res.data);
        // console.log(this.medicineMasterLocal);
      });
    this.clearSelection();

  }


  getMediTypeDropDown() {
    this.ordersService.DisplayMedicineMaster().subscribe((res: any) => {
      console.log("MediType DropDown Is:----->", res);

    });

  }

  getAutoGeneratedID() {
    this.ordersService.AutoGenetId().subscribe((res: any) => {
      console.log("Auto Generated ID", res);
      this.medicineMaster.controls["id"].setValue(res.data);
      console.log(this.medicineMaster);

    });
  }
  // DownloadList() {
  //   let data = {
  //     PharmacistUserId: this.currentUser.data.userId
  //   }
  //   this.ordersService.DownloadMediList(data).subscribe((res: any) => {
  //     console.log("Downloaded Data is:-->", res);
  //   });
  // }


  getAllData() {

    let data = {

      PageIndex: 0,
      PageSize: 40,
      RecordCount: 0,
      RecordLimit: 10,
      CommonSearch: "",
      OrderBy: this.currentUser.data.userId
    }
    this.ordersService.GetAllMediData(data).subscribe((res: any) => {
      console.log("all data is:---->", res);
      this.medicineMasterLocal = res.data.list;

    });
  }


  onSearchData() {
    let data = {
      searchBy: [
        {
          FieldName: "pharmacistUserId",
          FieldValue: 19,
          Parameter: "==",
          ConditionWith: "&&",
          RecordLimit: 10
        },
        {
          FieldName: "medicineName",
          FieldValue: "\"Test Medicine2\"",
          Parameter: "==",
          ConditionWith: "",
          RecordLimit: 10
        }
      ],
      PageIndex: 0,
      PageSize: 40,
      RecordCount: 0,
      RecordLimit: 10,
      CommonSearch: "",
      OrderBy: this.currentUser.data.userId
    }
    this.ordersService.GetAllMediData(data).subscribe((res: any) => {
      console.log("all data is:---->", res);
      this.medicineMasterLocal = res.data.list;

    });
  }
  editValue(event) {

    // console.log("evennt data is:--->", event);
    //   this.medicineMaster.value = event;
    //  console.log(this.medicineMaster.value);

    this.isHide = !this.isHide;

    this.medicineMaster = this.FormBuilder.group({

      id: event.medicineId,
      mediname: event.medicineName,
      strength: event.strength,
      size: event.packSize,
      price: event.price,
      type: event.type,
      manufacturer: event.manufacturer,
      status: event.isActive
    });
  }

  edit() {
    console.log(this.medicineMaster.controls['id'].value);
    // console.log(data);
    let medicineData = this.medicineMaster.controls;
    for (var val of this.medicineMasterLocal) {
      this.selectedID = val['id'];
      this.mediID = val['medicineId'];
      console.log(this.selectedID);
    }
    let values = {
      Id: this.selectedID,
      MedicineId: medicineData['id'].value,

      PharmacistUserId: this.currentUser.data.userId,
      MedicineName: medicineData['mediname'].value,

      Strength: medicineData['strength'].value,

      PackSize: medicineData['size'].value,

      Price: medicineData['price'].value,

      Type: medicineData['type'].value,

      Manufacturer: medicineData['manufacturer'].value,

      IsActive: medicineData['status'].value,

      AddedBy: this.currentUser.data.userId,
      AddedOn: this.dateFromUser,
      UpdatedBy: this.currentUser.data.userId,
      UpdatedOn: this.dateFromUser
    }

    this.ordersService.EditData(values).subscribe((res: any) => {


      console.log("Edited Data is:--->", res);
    });
  }


  // addMediType(){
  //   let data = {
  //     Id: this.medicineTypes.id,
  //     Type: this.medicineMaster.type,
  //     IsActive: this.medicineMaster.status,
  //     AddedBy: this.currentUser.data.userId,
  //     Ad: this.dateFromUser,
  //     UpdateddedOnBy: this.medicineTypes.id,
  //     UpdatedOn: this.dateFromUser


  //   }
  //   this.ordersService.AddMedicineType(data).subscribe((res: any) => {


  //     this.addTypes = res;
  //     console.log("Medicine Data is:--->", this.addTypes);

  //   });

  // }

  // uploadFile()
  // {
  //   this.fileService.UploadMediList.then
  // }


  // HideModal(modelName) {
  //   this.clearForm();
  //   //$("#" + modelName).hide();
  //   $("#" + modelName).modal('hide');

  // }


  open(content) {
    this.modalService.open(content, {ariaLabelledBy: 'modal-basic-title'}).result.then((result) => {
      this.closeResult = `Closed with: ${result}`;
    }, (reason) => {
      this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;
    });
  }
  
  private getDismissReason(reason: any): string {
    if (reason === ModalDismissReasons.ESC) {
      return 'by pressing ESC';
    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {
      return 'by clicking on a backdrop';
    } else {
      return `with: ${reason}`;
    }
  }

  onSelect(event) {
    console.log(event);
    this.files.push(...event.addedFiles);
  }

  ImportCsv() {
    if (this.files.length > 0) {
     
      

      const formData = new FormData();
      formData.append('AddedBy', this.currentUser.data.userId);
      formData.append('File', this.files[0]);
      console.log("File[0] data is:--->", this.files[0]);
      this.fileService.importFile(formData).subscribe((response) => {

        console.log("Upload Response will be:-->", response);

        if (response != null) {
          if (response["status"] === 200) {
           console.log("Upload Response will be:-->", response);
            // this.toastr.success(response["message"], 'Customer Master');
          } else if (response["status"] === 206) {
            let blobData = response["data"];
            // this.ShowModal('Match');
            this.convertFileToCSV(blobData);
          }
          else {
            // this.HideModal('ImportCustomer');
            
            // this.toastr.info(response["message"], 'Customer Master');
            console.log("else Part is:---->",response["message"]);
          }
        }
      });
    }
    else {
      // this.toastr.info("Plese Select File.", 'Customer Master');
      console.log("Please Select File.");
    }
  }

  convertFileToCSV(blobData) {

    // var fitype = 'octet/stream';//image/jpeg
    var splitted = this.files[0].name.split(".");
    var myfileType = splitted[splitted.length - 1];
    var myfileName = splitted[0];
    myfileType = myfileType.toLowerCase();
    console.log(myfileType);
    console.log(myfileName);
    // data:application/octet-stream;base64
    // application/json; charset=utf-8
    
    let csvContent = atob(blobData);
    var blob = new Blob([csvContent], { type: "data:application/octet-stream;base64" });
    this.attachmentFileName = myfileName + '.csv';

    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    // window.open(fileURL, '_blank');
    a.download = this.attachmentFileName;
    a.click();
    a.remove();
  }
}
